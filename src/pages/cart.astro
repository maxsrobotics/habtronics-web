---
import Layout from "../layouts/Layout.astro";

interface CartItem {
  title: string;
  price: string;
  priceId: string;
  quantity: number;
}
---

<Layout>
  <div class="max-w-5xl mx-auto px-6 py-12 font-inter">
    <h1 class="text-4xl font-sora mb-8">Your Cart</h1>

    <!-- Cart Content -->
    <div id="cart-contents">
      <table class="w-full border-separate border-spacing-y-2 mb-6">
        <thead>
          <tr>
            <th class="border p-3 bg-[#F3F2EF] text-left text-lg font-semibold">Product</th>
            <th class="border p-3 bg-[#F3F2EF] text-left text-lg font-semibold">Price</th>
            <th class="border p-3 bg-[#F3F2EF] text-left text-lg font-semibold">Quantity</th>
            <th class="border p-3 bg-[#F3F2EF] text-left text-lg font-semibold">Total</th>
            <th class="border p-3 bg-[#F3F2EF] text-left text-lg font-semibold">Action</th>
          </tr>
        </thead>
        <tbody id="cart-items">
          <!-- JS will populate rows -->
        </tbody>
      </table>

      <div class="flex justify-between items-center mt-8">
        <p class="text-xl font-semibold" id="cart-total">Total: $0.00</p>
        <button
          id="checkout-button"
          class="bg-[#FDF9F5] text-black border-2 border-black px-6 py-2 rounded-lg text-sm font-medium hover:opacity-70 transition"
        >
          Proceed to Checkout
        </button>
      </div>
    </div>

    <!-- Empty Message -->
    <div id="empty-message" class="hidden text-center mt-8 text-gray-700">
      <p class="text-lg mb-4">Your cart is empty.</p>
      <a
        href="/shop"
        class="inline-block bg-black text-white px-6 py-2 rounded-lg text-sm font-medium hover:opacity-80 transition"
      >
        Continue Shopping
      </a>
    </div>
    
  </div>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const cartItems = JSON.parse(localStorage.getItem("cart") || "[]");
    const tbody = document.getElementById("cart-items");
    const totalDisplay = document.getElementById("cart-total");
    const emptyMessage = document.getElementById("empty-message");
    const cartContents = document.getElementById("cart-contents");

    if (cartItems.length === 0) {
      cartContents.classList.add("hidden");
      emptyMessage.classList.remove("hidden");
      return;
    }

    let total = 0;

    cartItems.forEach((item) => {
      const itemTotal = item.price * item.quantity;
      total += itemTotal;

      const row = document.createElement("tr");
      row.innerHTML = `
        <td class="border p-3">${item.title}</td>
        <td class="border p-3">$${item.price}</td>
        <td class="border p-3">
          <input type="number" value="${item.quantity}" min="1"
            data-price-id="${item.priceId}"
            class="quantity-input border px-2 py-1 w-16 rounded" />
        </td>
        <td class="border p-3 total-cell">$${itemTotal.toFixed(2)}</td>
        <td class="border p-3">
          <button class="delete-button bg-red-100 text-red-700 px-3 py-1 rounded hover:bg-red-200"
            data-price-id="${item.priceId}">
            Delete
          </button>
        </td>
      `;
      tbody.appendChild(row);
    });

    totalDisplay.textContent = `Total: $${total.toFixed(2)}`;

    // Handle quantity changes
    document.querySelectorAll(".quantity-input").forEach((input) => {
      input.addEventListener("change", (e) => {
        const inputEl = e.target as any;
        let qty = parseInt(inputEl.value);
        if (qty < 1) qty = 1;
        inputEl.value = qty;

        const priceId = inputEl.dataset.priceId;
        const item = cartItems.find((i) => i.priceId === priceId);
        if (item) {
          item.quantity = qty;
          localStorage.setItem("cart", JSON.stringify(cartItems));

          const row = inputEl.closest("tr");
          const newTotal = item.price * item.quantity;
          row.querySelector(".total-cell").textContent = `$${newTotal.toFixed(2)}`;

          const newTotalSum = cartItems.reduce((sum, i) => sum + i.price * i.quantity, 0);
          totalDisplay.textContent = `Total: $${newTotalSum.toFixed(2)}`;
        }
      });
    });

    // Handle delete
    document.querySelectorAll(".delete-button").forEach((button: any) => {
      button.addEventListener("click", () => {
        const priceId = button.dataset.priceId;
        const index = cartItems.findIndex((i) => i.priceId === priceId);
        if (index !== -1) {
          cartItems.splice(index, 1);
          localStorage.setItem("cart", JSON.stringify(cartItems));
          location.reload();
        }
      });
    });

    // Checkout
    document.getElementById("checkout-button").addEventListener("click", () => {
      window.location.href = "/checkout";
    });
  });
</script>
